module chip(
    input  [15:0] sw,   // binary input from switches
    input         btnC, // push button being used as reset
    input         clk,  // 100 MHz clock generated by Basys 3
	output [15:0] led,  // board LEDs
    output  [6:0] seg,  // seven-segment display segments
    output  [3:0] an,   // display specific anodes
    output        dp    // display specific decimal points
);

wire        cpuClk, dpEnable, MW;

wire  [3:0] currentDigit;

	wire  [9:0] PC, NextPC;
	wire  [7:0] IOA, IOB, IOC, IOD,
		    IOE, IOF, IOG, IOH,
		    DataA, DataB, DataC, DataD, Din;

wire [15:0] Iin;



assign IOA = {4'b0, sw[11:8]};

assign IOB = sw[7:0];

assign dp = dpEnable | cpuClk;
  
  
  
cpu aRealProcessorOMGZ(
  .CLK(cpuClk),
  .RESET(btnC),
  .PC(PC),
  .NextPC(NextPC),
  .Iin(Iin),
  .DataA(DataA),
  .DataB(DataB),
  .DataC(DataC),
  .DataD(DataD),
  .Din(Din),
  .MW(MW),
  .EN_L(~sw[14])   // sw[14] tells the CPU to either stall or to execute
);
    
// BELOW IS THE ONLY LINE YOU SHOULD HAVE TO MODIFY IN THIS FILE
iramHRM leProgramToRun(
  .CLK(cpuClk),
  .RESET(btnC),
  .ADDR(PC),
  .Q(Iin)
);

dram memoriesPressedBetweenThePagesOfMyMind(
  .CLK(cpuClk),
  .RESET(btnC),
  .ADDR(DataD),
  .DATA(DataB),
  .MW(MW),
  .Q(Din),
  .IOA(IOA),
  .IOB(IOB),
  .IOC(IOC),
  .IOD(IOD),
  .IOE(IOE),
  .IOF(IOF),
  .IOG(IOG),
  .IOH(IOH)
);



// VARIABLE CLOCK MODULE: sw[15] chooses between fast clock and slow clock
var_clk clockGenerator(
  .clock_100MHz(clk),
  .clock_sel({sw[15], sw[15], sw[15]}),
  .var_clock(cpuClk)
);


// LED ARRAY LOGIC
assign led[15:8] = IOD;
assign led[7:0]  = IOC;

  
// SEVEN-SEGMENT DISPLAY DRIVERS
  
DisplayRotator dispRot(clk, sw[13], IOG[3:0], IOG[7:4], IOH[3:0], IOH[7:4], IOE[3:0], IOE[7:4], IOF[3:0], IOF[7:4], an, dpEnable, currentDigit);
HexToLED hexConverter(currentDigit, seg);

endmodule
